#!/bin/sh

n="
"

## Defaults
### Options
MOMMY_OPT_CONFIG_FILE="$HOME/.config/mommy/config.sh"

### Configuration
MOMMY_CAREGIVER="mommy"
MOMMY_PRONOUNS="she her her"
MOMMY_SWEETIE="girl"
MOMMY_SUFFIX="~"
MOMMY_COLOR="005"

MOMMY_CAPITALIZE="0"

MOMMY_COMPLIMENTS="
# generic~
*pets your head*
amazing work as always

# good X~
good %%SWEETIE%%
good job, %%SWEETIE%%
that's a good %%SWEETIE%%
who's my good %%SWEETIE%%

# proud~
%%CAREGIVER%% is very proud of you
%%CAREGIVER%% is so proud of you
%%CAREGIVER%% knew you could do it
%%CAREGIVER%% loves you, you are doing amazing

# compliment~
%%CAREGIVER%%'s %%SWEETIE%% is so smart

# reward~
%%CAREGIVER%% thinks you deserve a special treat for that
my little %%SWEETIE%% deserves a big fat kiss for that
"
MOMMY_COMPLIMENTS_EXTRA=""
MOMMY_COMPLIMENTS_ENABLED="1"

MOMMY_ENCOURAGEMENTS="
# trust~
%%CAREGIVER%% believes in you
%%CAREGIVER%% knows you'll get there
%%CAREGIVER%% knows %%THEIR%% little %%SWEETIE%% can do better
just know that %%CAREGIVER%% still loves you

# consolation~
don't worry, it'll be alright
it's okay to make mistakes
%%CAREGIVER%% knows it's hard, but it will be okay

# fallback~
%%CAREGIVER%% is always here for you
%%CAREGIVER%% is always here for you if you need %%THEM%%
come here, sit on my lap while we figure this out together

# encouragement~
never give up, my love
just a little further, %%CAREGIVER%% knows you can do it
%%CAREGIVER%% knows you'll get there, don't worry about it

# clean up~
did %%CAREGIVER%%'s %%SWEETIE%% make a big mess
"
MOMMY_ENCOURAGEMENTS_EXTRA=""
MOMMY_ENCOURAGEMENTS_ENABLED="1"

MOMMY_FORBIDDEN_WORDS=""


## Lists
# A list is a collection of entries. Entries are separated by a forward slash (`/`) or by a newline. Entries containing
# only whitespace or starting with a `#` are considered comments and are ignored. If a line starts with a `#` and
# contains a `/`, the `/` is not a separator but part of the comment. A sanitized list is a list in which there are no
# forward slashes (`/`) and in which there are no comments.

# Returns `0` if the string `$1` contains any of the entries in the sanitized list `$2` as a substring, and returns `1`
# otherwise.
list_contains_any() {
    if [ -z "$2" ]; then return 1; fi

    echo "$2" | while IFS="$n" read -r needle; do [ -z "${1##*"$needle"*}" ] && return 0; done
    return "$?"
}

# Takes the list in stdin and (1) removes all lines starting with `#`, (2) replaces each `/` with a newline, (3) removes
# all blank lines, and (4) removes all entries that contain any of the entries in the sanitized list `$1` as a
# substring.
list_sanitize() {
    cat |
        grep -v "^#" |
        awk -v RS="/" "{print}" |
        grep -v "^[[:space:]]*\$" |
        while IFS="$n" read -r line; do list_contains_any "$line" "$1" || echo "$line"; done
    return 0
}

# Writes a random entry from the list in stdin to stdout.
if [ -x "$(command -v shuf)" ]; then
    list_choose() {
        cat | shuf -n1
    }
else
    list_choose() {
        lines="$(cat)"
        count="$(echo "$lines" | wc -l)"
        idx="$(jot -r 1 1 "$count")"
        echo "$lines" | sed "${idx}q;d"
    }
fi


## Functions
# Prints stdin, but with color depending on `$1`. If `$1` equals `lolcat`, stdin is piped to `lolcat`. If `$1` is empty,
# or color is not enabled in the terminal, stdin is printed normally. Otherwise, `$1` is used as the xterm color.
color_cat() {
    if [ "$1" = "lolcat" ]; then
        cat | lolcat -f
    elif [ -z "$1" ] || [ -z "$(tput colors)" ] || [ "$(tput colors)" -lt 8 ]; then
        cat
    else
        # Work around OpenBSD bug https://www.mail-archive.com/bugs@openbsd.org/msg18443.html
        tput setaf 0 1>/dev/null 2>/dev/null || tput_bug="0 0"

        # shellcheck disable=SC2086 # OpenBSD workaround requires two arguments
        echo "$(tput setaf "$1" $tput_bug)$(cat)$(tput sgr0)"
    fi
    return 0
}

# Reads stdin; if `$1` is `0`, the first character the line is changed to lowercase, if `$1` is `1`, the first character
# is changed to uppercase, and otherwise nothing is changed; and writes to stdout.
capitalize() {
    if [ "$1" = "0" ]; then
        mapping="tolower"
    elif [ "$1" = "1" ]; then
        mapping="toupper"
    else
        cat
        return 0
    fi

    cat | awk "{ print $mapping(substr(\$0, 1, 1)) substr(\$0, 2) }"
    return 0
}

# Given the whitespace-separated list of three words in `$1`, stores the three words in `$they`, `$them`, and `$their`,
# respectively.
split_pronouns() {
    they="${1%% *}"
    remainder="${1#* }"
    them="${remainder%% *}"
    their="${remainder##* }"

    return 0
}

# Reads stdin, and
# 1. replaces
#    * `%%SWEETIE%%` with a random entry from `$1`,
#    * `%%THEY%%` with the first word in `$2`,
#    * `%%THEM%%` with the second word in `$2`,
#    * `%%THEIR%%` with the third word in `$2`, and
#    * `%%CAREGIVER%%` with a random entry from `$3`;
# 2. applies `capitalize_lines` using `$5` as the choice parameter;
# 3. removes leading and trailing newlines;
# 4. appends `$4`; and
# 5. writes to stdout.
fill_template() {
    sweetie="$(echo "$1" | list_sanitize | list_choose)"
    split_pronouns "$(echo "$2" | list_sanitize | list_choose)"
    caregiver="$(echo "$3" | list_sanitize | list_choose)"
    suffix="$(echo "$4" | list_sanitize | list_choose)"

    template="$(cat | sed -e "s/%%SWEETIE%%/$sweetie/g" \
                          -e "s/%%THEY%%/$they/g" \
                          -e "s/%%THEM%%/$them/g" \
                          -e "s/%%THEIR%%/$their/g" \
                          -e "s/%%CAREGIVER%%/$caregiver/g")"

    printf "%s" "$template" "$suffix" | capitalize "$5"
    return 0
}


## Read options
MOMMY_OPT_HELP=""
MOMMY_OPT_VERSION=""
MOMMY_OPT_EVAL=""
MOMMY_OPT_STATUS=""
MOMMY_OPT_TARGET="2"

while getopts "hv1c:e:s:-:" OPTION; do
    # Workaround for long options: https://stackoverflow.com/a/28466267/
    if [ "$OPTION" = "-" ]; then
        OPTION="${OPTARG%%=*}"
        OPTARG="${OPTARG#$OPTION}"
        OPTARG="${OPTARG#=}"
    fi

    # shellcheck disable=SC2214 # Handled by workaround
    case "$OPTION" in
    h|help) MOMMY_OPT_HELP="1" ;;
    v|version) MOMMY_OPT_VERSION="1" ;;
    1) MOMMY_OPT_TARGET="1" ;;
    c) MOMMY_OPT_CONFIG_FILE="$OPTARG" ;;
    e) MOMMY_OPT_EVAL="$OPTARG" ;;
    s) MOMMY_OPT_STATUS="$OPTARG" ;;
    ?) echo "Illegal option --" ;;
    esac
done

shift "$((OPTIND - 1))"


## Load configuration
# shellcheck disable=SC1090 # User-defined target
[ -r "$MOMMY_OPT_CONFIG_FILE" ] && . "$MOMMY_OPT_CONFIG_FILE"


## Output
if [ -n "$MOMMY_OPT_HELP" ]; then
    local_man_path="$(dirname -- "$0")/../resources/mommy.1"

    if [ -f "$local_man_path" ]; then
        man "$local_man_path"
        exit "$?"
    else
        man mommy
        exit "$?"
    fi
elif [ -n "$MOMMY_OPT_VERSION" ]; then
    echo "mommy v%%VERSION_NUMBER%%"
    exit 0
else
    # Run command
    if [ -n "$MOMMY_OPT_EVAL" ]; then
        (eval "$MOMMY_OPT_EVAL")
        command_exit_code="$?"
    elif [ -n "$MOMMY_OPT_STATUS" ]; then
        command_exit_code="$MOMMY_OPT_STATUS"
    else
        ("$@")
        command_exit_code="$?"
    fi

    # Choose and fill template (if enabled)
    if [ "$command_exit_code" -eq 0 ] && [ "$MOMMY_COMPLIMENTS_ENABLED" = "1" ]; then
        templates="$MOMMY_COMPLIMENTS/$MOMMY_COMPLIMENTS_EXTRA"
    elif [ "$command_exit_code" -ne 0 ] && [ "$MOMMY_ENCOURAGEMENTS_ENABLED" = "1" ]; then
        templates="$MOMMY_ENCOURAGEMENTS/$MOMMY_ENCOURAGEMENTS_EXTRA"
    else
        exit "$command_exit_code"
    fi

    color="$(echo "$MOMMY_COLOR" | list_sanitize | list_choose)"
    forbidden_words="$(echo "$MOMMY_FORBIDDEN_WORDS" | list_sanitize)"

    response="$(echo "$templates" |
                    list_sanitize "$forbidden_words" |
                    list_choose |
                    fill_template "$MOMMY_SWEETIE" "$MOMMY_PRONOUNS" "$MOMMY_CAREGIVER" "$MOMMY_SUFFIX" \
                                  "$MOMMY_CAPITALIZE")"

    # Output template
    case "$MOMMY_OPT_TARGET" in
    1) echo "$response" | color_cat "$color" >&1 ;;
    2) echo "$response" | color_cat "$color" >&2 ;;
    esac

    exit "$command_exit_code"
fi
